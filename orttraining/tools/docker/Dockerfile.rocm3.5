# sudo docker build --network=host --file Dockerfile.rocm3.5 --tag ort:rocm3.5-ort-dev .

FROM rocm/tensorflow:rocm3.5-tf2.1-dev

RUN curl https://bazel.build/bazel-release.pub.gpg | apt-key add -
RUN cat /dev/null > /etc/apt/sources.list.d/rocm.list
RUN echo 'deb [arch=amd64] http://repo.radeon.com/rocm/apt/3.5/ xenial main' | tee /etc/apt/sources.list.d/rocm.list

RUN apt-get -y update
RUN apt-get -y install apt-utils
RUN apt-get -y install build-essential autotools-dev \
    make git curl vim wget rsync jq openssh-server openssh-client sudo \
    iputils-ping net-tools ethtool \
    automake autoconf libtool flex doxygen \
    perl lsb-release iproute2 pciutils graphviz \
    bc tar git bash pbzip2 pv bzip2 cabextract \
    # g++ gcc
    && apt-get autoremove

# ROCm library
RUN apt-get -y install rocm-libs miopen-hip

# Labels for the docker
LABEL description="This docker sets up the environment to run ORT Training with AMD GPU"

ENV WORK_DIR=/work
RUN mkdir -p $WORK_DIR

ENV GITHUB_DIR=$WORK_DIR/github
RUN mkdir -p $GITHUB_DIR

# Infiniband setup
ENV MOFED_VERSION=5.0-2.1.8.0
ENV MOFED_OS=ubuntu18.04
ENV MOFED_FILENAME=MLNX_OFED_LINUX-${MOFED_VERSION}-${MOFED_OS}-x86_64
RUN curl -fSsL https://www.mellanox.com/downloads/ofed/MLNX_OFED-${MOFED_VERSION}/${MOFED_FILENAME}.tgz | tar -zxpf -
RUN cd MLNX_OFED_LINUX-${MOFED_VERSION}-${MOFED_OS}-x86_64 && \
    ./mlnxofedinstall --force --user-space-only --without-fw-update && \
    cd .. && \
    rm -r MLNX_OFED_LINUX-${MOFED_VERSION}-${MOFED_OS}-x86_64


WORKDIR $GITHUB_DIR

ENV OPENMPI_BASEVERSION=4.0
ENV OPENMPI_VERSION=${OPENMPI_BASEVERSION}.4
ENV OMPI_DIR=${WORK_DIR}/openmpi-${OPENMPI_VERSION}
RUN wget -q -O - https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASEVERSION}/openmpi-${OPENMPI_VERSION}.tar.gz | tar xzf - && \
    cd openmpi-${OPENMPI_VERSION} && \
    ./configure --enable-mca-no-build=btl-uct --prefix=${OMPI_DIR} && \
    make -j"$(nproc)" install && \
    # Sanity check:
    test -f ${OMPI_DIR}/bin/mpic++

ENV PATH=$OMPI_DIR/bin:${PATH}
ENV LD_LIBRARY_PATH=$OMPI_DIR/lib:${LD_LIBRARY_PATH}

# RCCL
# RUN apt-get -y purge rccl
# RUN git clone https://github.com/ROCmSoftwarePlatform/rccl.git && cd rccl && ./install.sh -i
ENV HSA_FORCE_FINE_GRAIN_PCIE=1
ENV NCCL_MAX_NCHANNELS=4

# CMake
ENV CMAKE_VERSION=3.17.3
RUN cd /usr/local && \
    wget -q -O - https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz | tar zxf -
ENV PATH=/usr/local/cmake-${CMAKE_VERSION}-Linux-x86_64/bin:${PATH}

#ONNX Runtime
WORKDIR $GITHUB_DIR
ENV ORT_DIR=$GITHUB_DIR/onnxruntime
RUN git clone --recursive -b wezhan/amdgpu https://github.com/microsoft/onnxruntime.git \
  && cd onnxruntime \
  && python3 tools/ci_build/build.py --build_dir build --config Release --parallel --skip_tests --build_wheel \
	--use_hip --hip_home /opt/rocm --use_mpi --mpi_home $OMPI_DIR \
	--enable_training --cmake_extra_defines ONNXRUNTIME_VERSION=`cat ./VERSION_NUMBER` > build.log 2>&1; exit 0 \
  && test -f $ORT_DIR/build/Release/onnxruntime_training_bert \
  && pip install $ORT_DIR/build/Release/dist/*.whl

RUN ldconfig

# Enable ssh access without password needed
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
RUN sed -i 's/#StrictModes yes/StrictModes no/g' /etc/ssh/sshd_config
RUN sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/g' /etc/ssh/sshd_config
RUN sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/g' /etc/ssh/sshd_config

RUN pip install --no-cache-dir \
    tqdm boto3 requests six ipdb \
    h5py html2text nltk progressbar \
    mpi4py git+https://github.com/NVIDIA/dllogger

# Start or Restart sshd service
ENTRYPOINT service ssh restart && /bin/bash

# Remove gtest and gmock
RUN rm -rf /opt/rocm/include/gtest /opt/rocm/include/gmock

# Add model and scripts
ENV BERT_DIR=$WORK_DIR/bert
RUN mkdir -p $BERT_DIR

ADD model $BERT_DIR/model
ADD script $BERT_DIR/script
RUN chmod a+x $BERT_DIR/script/run_perf.sh

ADD lib $BERT_DIR/lib
ENV LD_PERLOAD=$BERT_DIR/lib/libpsl.so

ENV LOG_DIR=/data/wezhan/logs

WORKDIR $BERT_DIR/script
